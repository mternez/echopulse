package fr.mternez.echopulse.server.config;

import fr.mternez.echopulse.core.server.application.service.*;
import fr.mternez.echopulse.core.server.port.in.*;
import fr.mternez.echopulse.server.data.adapter.ChannelRepositoryJpaAdapter;
import fr.mternez.echopulse.server.data.adapter.MembershipRepositoryJpaAdapter;
import fr.mternez.echopulse.server.data.adapter.ServerRepositoryJpaAdapter;
import fr.mternez.echopulse.server.data.adapter.UserRepositoryJpaAdapter;
import fr.mternez.echopulse.server.kafka.adapter.EventPublisherAdapter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class InboundPortsRegistrationConfig {

    private final UserRepositoryJpaAdapter userRepositoryJpaAdapter;
    private final ServerRepositoryJpaAdapter serverRepositoryJpaAdapter;
    private final MembershipRepositoryJpaAdapter membershipRepositoryJpaAdapter;
    private final ChannelRepositoryJpaAdapter channelRepositoryJpaAdapter;
    private final EventPublisherAdapter eventPublisherAdapter;

    InboundPortsRegistrationConfig(
            final UserRepositoryJpaAdapter userRepositoryJpaAdapter,
            final ServerRepositoryJpaAdapter serverRepositoryJpaAdapter,
            final MembershipRepositoryJpaAdapter membershipRepositoryJpaAdapter,
            final ChannelRepositoryJpaAdapter channelRepositoryJpaAdapter,
            final EventPublisherAdapter eventPublisherAdapter
    ) {
        this.userRepositoryJpaAdapter = userRepositoryJpaAdapter;
        this.serverRepositoryJpaAdapter = serverRepositoryJpaAdapter;
        this.membershipRepositoryJpaAdapter = membershipRepositoryJpaAdapter;
        this.channelRepositoryJpaAdapter = channelRepositoryJpaAdapter;
        this.eventPublisherAdapter = eventPublisherAdapter;
    }

    @Bean
    UserCommandService userCommandService() {
        return new UserCommandServiceImpl(this.userRepositoryJpaAdapter);
    }

    @Bean
    ServerCommandService serverCommandService() {
        return new ServerCommandServiceImpl(this.userRepositoryJpaAdapter, this.serverRepositoryJpaAdapter, this.membershipRepositoryJpaAdapter, this.channelRepositoryJpaAdapter);
    }

    @Bean
    MembershipCommandService membershipCommandService() {
        return new MembershipCommandServiceImpl(this.userRepositoryJpaAdapter, this.membershipRepositoryJpaAdapter, this.serverRepositoryJpaAdapter, this.eventPublisherAdapter);
    }

    @Bean
    ChannelCommandService channelCommandService() {
        return new ChannelCommandServiceImpl(this.channelRepositoryJpaAdapter, this.serverRepositoryJpaAdapter, this.eventPublisherAdapter);
    }

    @Bean
    CommandAuthorizationService commandAuthorizationService() {
        return new CommandAuthorizationServiceImpl();
    }
}
package fr.mternez.echopulse.server.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.CsrfConfigurer;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

@Configuration
@EnableWebSecurity
public class SecurityConfiguration {

    @Bean
    SecurityFilterChain securityFilterChain(final HttpSecurity http,
                                            final JwtAuthenticationConverter jwtAuthenticationConverter,
                                            final JwtDecoder jwtDecoder) throws Exception {

        http
                .cors(c -> c.configurationSource(corsConfigurationSource()))
                .csrf(CsrfConfigurer::disable)
                .authorizeHttpRequests((authorize) -> authorize
                        .anyRequest().authenticated()
                )
                .oauth2ResourceServer((oauth2) ->
                            oauth2.jwt(jwtConfigurer -> {
                                jwtConfigurer.decoder(jwtDecoder);
                                jwtConfigurer.jwtAuthenticationConverter(jwtAuthenticationConverter);
                            })
                );

        return http.build();
    }

    @Bean
    JwtAuthenticationConverter jwtDecoder() {
        return new JwtAuthenticationConverter();
    }

    // TODO Fix CORS
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(List.of("http://localhost:4200"));
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE"));
        configuration.setAllowedHeaders(List.of("*"));
        configuration.setAllowCredentials(true);
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
package fr.mternez.echopulse.server.data.adapter;

import fr.mternez.echopulse.core.common.domain.model.Channel;
import fr.mternez.echopulse.core.common.domain.model.ChannelId;
import fr.mternez.echopulse.core.common.domain.model.Server;
import fr.mternez.echopulse.core.common.domain.model.ServerId;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.server.port.out.ChannelRepository;
import fr.mternez.echopulse.server.data.mapper.DomainModelMapper;
import fr.mternez.echopulse.server.data.model.ChannelEntity;
import fr.mternez.echopulse.server.data.model.ServerEntity;
import fr.mternez.echopulse.server.data.repository.ChannelEntityRepository;
import fr.mternez.echopulse.server.data.repository.ServerEntityRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Repository
public class ChannelRepositoryJpaAdapter implements ChannelRepository {

    private final ServerEntityRepository serverEntityRepository;
    private final ChannelEntityRepository channelEntityRepository;
    private final DomainModelMapper domainModelMapper;

    ChannelRepositoryJpaAdapter(
            final ServerEntityRepository serverEntityRepository,
            final ChannelEntityRepository channelEntityRepository,
            final DomainModelMapper domainModelMapper
    ) {
        this.serverEntityRepository = serverEntityRepository;
        this.channelEntityRepository = channelEntityRepository;
        this.domainModelMapper = domainModelMapper;
    }

    @Override
    @Transactional
    public Channel persistNew(Channel channel) throws PersistenceException {

        final ServerEntity serverEntity = this.serverEntityRepository.findById(channel.getServerId().getValue())
                .orElseThrow(() -> new PersistenceException(Server.class, new IllegalArgumentException("Server not found")));

        final ChannelEntity entity = new ChannelEntity();
        entity.setId(channel.getId().getValue());
        entity.setName(channel.getName());
        entity.setServer(serverEntity);

        final ChannelEntity savedEntity = this.channelEntityRepository.save(entity);

        if(savedEntity == null) {
            throw new PersistenceException(Channel.class, new RuntimeException("Failed to save channel"));
        }

        return this.domainModelMapper.toDomainModel(savedEntity);
    }

    @Override
    @Transactional
    public void delete(Channel channel) {

        this.channelEntityRepository.deleteById(channel.getId().getValue());
    }

    @Override
    @Transactional
    public Optional<Channel> findById(ChannelId channelId) {

        return this.channelEntityRepository
                .findById(channelId.getValue())
                .map(this.domainModelMapper::toDomainModel);
    }

    @Override
    @Transactional
    public void deleteAllByServerId(final ServerId serverId) {

        final Set<ChannelEntity> channels = this.channelEntityRepository
                .findChannelEntitiesByServerId(serverId.getValue());

        for(var channel : channels) {
            channel.setServer(null);
        }

        this.channelEntityRepository.deleteAll(channels);
    }
}
package fr.mternez.echopulse.server.data.adapter;

import fr.mternez.echopulse.core.common.domain.model.*;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.server.port.out.MembershipRepository;
import fr.mternez.echopulse.server.data.mapper.DomainModelMapper;
import fr.mternez.echopulse.server.data.model.MembershipEntity;
import fr.mternez.echopulse.server.data.model.RoleEntity;
import fr.mternez.echopulse.server.data.model.ServerEntity;
import fr.mternez.echopulse.server.data.model.UserEntity;
import fr.mternez.echopulse.server.data.repository.MembershipEntityRepository;
import fr.mternez.echopulse.server.data.repository.RoleEntityRepository;
import fr.mternez.echopulse.server.data.repository.ServerEntityRepository;
import fr.mternez.echopulse.server.data.repository.UserEntityRepository;
import org.springframework.stereotype.Component;

import java.util.Set;
import java.util.stream.Collectors;

@Component
public class MembershipRepositoryJpaAdapter implements MembershipRepository {

    private final MembershipEntityRepository membershipEntityRepository;
    private final UserEntityRepository userEntityRepository;
    private final ServerEntityRepository serverEntityRepository;
    private final DomainModelMapper domainModelMapper;

    public MembershipRepositoryJpaAdapter(
            final MembershipEntityRepository membershipEntityRepository,
            final UserEntityRepository userEntityRepository,
            final RoleEntityRepository roleEntityRepository,
            final ServerEntityRepository serverEntityRepository,
            final DomainModelMapper domainModelMapper
    ) {
        this.membershipEntityRepository = membershipEntityRepository;
        this.userEntityRepository = userEntityRepository;
        this.serverEntityRepository = serverEntityRepository;
        this.domainModelMapper = domainModelMapper;
    }

    @Override
    public Membership persistNew(final Membership membership) throws PersistenceException {

        final UserEntity user = this.userEntityRepository.findById(membership.getUserId().getValue())
                .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("User not found")));

        final ServerEntity server = this.serverEntityRepository.findById(membership.getServerId().getValue())
                .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("Server not found")));

        final MembershipEntity entity = new MembershipEntity();
        entity.setUser(user);
        entity.setServer(server);
        final Set<String> roleNames = membership.getRoles().stream().map(Role::getName).collect(Collectors.toSet());
        final Set<RoleEntity> roles = server.getRoles().stream().filter(r -> roleNames.contains(r.getName())).collect(Collectors.toSet());
        entity.setRoles(roles);

        final MembershipEntity savedEntity = this.membershipEntityRepository.save(entity);

        if(savedEntity == null) {
            throw new PersistenceException(Membership.class, new IllegalArgumentException("Membership could not be saved"));
        }

        user.getMemberships().add(savedEntity);

        if(this.userEntityRepository.save(user) == null) {
            throw new PersistenceException(User.class, new IllegalArgumentException("User could not be saved during membership creation"));
        }

        return this.domainModelMapper.toDomainModel(savedEntity);
    }

    @Override
    public void deleteByServerIdUserId(final ServerId serverId, final UserId userId) throws PersistenceException {

        final Set<MembershipEntity> memberships = this.membershipEntityRepository
                .findAllByServerIdAndUser_Id(serverId.getValue(), userId.getValue(), MembershipEntity.class);

        for(var membership : memberships) {
            membership.setServer(null);
            membership.getUser().getMemberships().remove(membership);
            membership.setUser(null);
        }

        this.membershipEntityRepository.deleteAll(memberships);
    }

    @Override
    public void deleteAllByServerId(final ServerId serverId) {

        final Set<MembershipEntity> memberships = this.membershipEntityRepository
                .findMembershipEntitiesByServerId(serverId.getValue());

        for(var membership : memberships) {
            membership.setServer(null);
            membership.getUser().getMemberships().remove(membership);
            membership.setUser(null);
        }

        this.membershipEntityRepository.deleteAll(memberships);
    }
}
package fr.mternez.echopulse.server.data.adapter;

import fr.mternez.echopulse.core.common.domain.model.Role;
import fr.mternez.echopulse.core.common.domain.model.Server;
import fr.mternez.echopulse.core.common.domain.model.ServerId;
import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.server.port.out.ServerRepository;
import fr.mternez.echopulse.server.data.mapper.DomainModelMapper;
import fr.mternez.echopulse.server.data.model.RoleEntity;
import fr.mternez.echopulse.server.data.model.ServerEntity;
import fr.mternez.echopulse.server.data.model.UserEntity;
import fr.mternez.echopulse.server.data.projection.ServerDefaultRole;
import fr.mternez.echopulse.server.data.repository.RoleEntityRepository;
import fr.mternez.echopulse.server.data.repository.ServerEntityRepository;
import fr.mternez.echopulse.server.data.repository.UserEntityRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Component;

import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Component
public class ServerRepositoryJpaAdapter implements ServerRepository {

    private final ServerEntityRepository serverEntityRepository;
    private final UserEntityRepository userEntityRepository;
    private final RoleEntityRepository roleEntityRepository;
    private final DomainModelMapper domainModelMapper;

    ServerRepositoryJpaAdapter(
            final ServerEntityRepository serverEntityRepository,
            final UserEntityRepository userEntityRepository,
            final RoleEntityRepository roleEntityRepository,
            final DomainModelMapper domainModelMapper
    ) {
        this.serverEntityRepository = serverEntityRepository;
        this.userEntityRepository = userEntityRepository;
        this.roleEntityRepository = roleEntityRepository;
        this.domainModelMapper = domainModelMapper;
    }

    @Override
    @Transactional
    public Server persistNew(final Server server) throws PersistenceException {

        final UserEntity owner = this.userEntityRepository.findById(server.getOwner().getId().getValue())
                .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("User not found")));

        final ServerEntity serverEntity = new ServerEntity();
        serverEntity.setId(server.getId().getValue());
        serverEntity.setName(server.getName());
        serverEntity.setOwner(owner);

        final ServerEntity savedServer = this.serverEntityRepository.save(serverEntity);

        final RoleEntity defaultRole = this.roleEntityRepository.save(this.createRoleEntity(savedServer, server.getDefaultRole()));
        savedServer.setDefaultRole(defaultRole);

        server.getRoles().forEach(role -> {
            // Create all roles except for default role
            if(!Objects.equals(role.getName(), savedServer.getDefaultRole().getName())) {
                final RoleEntity roleEntity = this.roleEntityRepository.save(this.createRoleEntity(savedServer, role));
                savedServer.addRole(roleEntity);
            }
        });

        try {
            return this.domainModelMapper.toDomainModel(this.serverEntityRepository.save(savedServer));
        } catch(Exception e) {
            throw new PersistenceException(ServerEntity.class, e);
        }
    }

    @Override
    @Transactional
    public Server update(Server server) throws PersistenceException {

        final UUID serverId = server.getId().getValue();

        final ServerEntity entity = this.serverEntityRepository.findById(serverId)
                .orElseThrow(() -> new PersistenceException(Server.class, new IllegalArgumentException("Server not found")));

        entity.setName(server.getName());
        this.updateOwner(entity, server);
        this.updateDefaultRole(entity, server);
        this.updateRoles(entity, server);

        return this.domainModelMapper.toDomainModel(this.serverEntityRepository.save(entity));
    }

    private void updateOwner(ServerEntity entity, Server model) throws PersistenceException {

        final UUID oldOwnerId = entity.getOwner().getId();
        final UUID newOwnerId = model.getOwner().getId().getValue();

        if(!newOwnerId.equals(oldOwnerId)) {
            final UserEntity owner = this.userEntityRepository.findById(newOwnerId)
                    .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("User not found")));
            entity.setOwner(owner);
        }
    }

    private void updateDefaultRole(ServerEntity entity, Server model) throws PersistenceException {

        final String oldDefaultRoleName = entity.getDefaultRole().getName();
        final String newDefaultRoleName = model.getDefaultRole().getName();

        if(!newDefaultRoleName.equals(oldDefaultRoleName)) {
            final RoleEntity defaultRole = this.roleEntityRepository.findRoleEntityByServerIdAndName(model.getId().getValue(), newDefaultRoleName)
                    .orElseThrow(() -> new PersistenceException(RoleEntity.class, new IllegalArgumentException("Role not found")));
            entity.setDefaultRole(defaultRole);
        }

    }

    private void updateRoles(ServerEntity entity, Server model) throws PersistenceException {

        final Set<String> oldRoleNames = entity.getRoles().stream().map(RoleEntity::getName).collect(Collectors.toSet());
        final Set<String> newRoleNames = model.getRoles().stream().map(Role::getName).collect(Collectors.toSet());

        // Remove roles
        oldRoleNames.removeIf(oldRole -> !newRoleNames.contains(oldRole));

        // Filter roles not added yet
        final Set<String> newRoles = newRoleNames.stream()
                .filter(newRole -> !oldRoleNames.contains(newRole))
                .collect(Collectors.toSet());

        final Set<RoleEntity> newRoleEntities = this.roleEntityRepository.findRoleEntitiesByServerIdAndNameIsIn(model.getId().getValue(), newRoles);

        if(newRoleEntities.size() != newRoles.size()) {
            throw new PersistenceException(RoleEntity.class, new IllegalArgumentException("Roles not found"));
        }

        entity.getRoles().addAll(newRoleEntities);
    }

    @Override
    @Transactional
    public Optional<Server> findById(ServerId serverId) {
        return this.serverEntityRepository.findById(serverId.getValue()).map(this.domainModelMapper::toDomainModel);
    }

    @Override
    @Transactional
    public boolean existsById(final ServerId serverId) {

        return this.serverEntityRepository.existsById(serverId.getValue());
    }

    @Override
    @Transactional
    public void deleteById(ServerId serverId) {

        this.serverEntityRepository.deleteById(serverId.getValue());
    }
    
    @Override
    @Transactional
    public Optional<Role> findDefaultRole(ServerId serverId) {

        return this.serverEntityRepository
                .findById(serverId.getValue(), ServerDefaultRole.class)
                .map(ServerDefaultRole::getDefaultRole)
                .map(this.domainModelMapper::toDomainModel);
    }

    private RoleEntity createRoleEntity(final ServerEntity server, final Role model) {
        final RoleEntity roleEntity = new RoleEntity();
        roleEntity.setName(model.getName());
        roleEntity.setDescription(model.getDescription());
        roleEntity.setColor(model.getColor());
        roleEntity.setPermissions(model.getPermissions());
        roleEntity.setServer(server);
        return roleEntity;
    }
}
package fr.mternez.echopulse.server.data.adapter;

import fr.mternez.echopulse.core.common.domain.model.Membership;
import fr.mternez.echopulse.core.common.domain.model.Role;
import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.core.common.domain.model.UserId;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.server.port.out.UserRepository;
import fr.mternez.echopulse.server.data.mapper.DomainModelMapper;
import fr.mternez.echopulse.server.data.model.MembershipEntity;
import fr.mternez.echopulse.server.data.model.RoleEntity;
import fr.mternez.echopulse.server.data.model.ServerEntity;
import fr.mternez.echopulse.server.data.model.UserEntity;
import fr.mternez.echopulse.server.data.repository.MembershipEntityRepository;
import fr.mternez.echopulse.server.data.repository.ServerEntityRepository;
import fr.mternez.echopulse.server.data.repository.UserEntityRepository;
import jakarta.transaction.Transactional;
import org.springframework.stereotype.Component;

import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

@Component
public class UserRepositoryJpaAdapter implements UserRepository {

    private final UserEntityRepository userEntityRepository;
    private final MembershipEntityRepository membershipEntityRepository;
    private final ServerEntityRepository serverEntityRepository;
    private final DomainModelMapper domainModelMapper;

    UserRepositoryJpaAdapter(
            final UserEntityRepository userEntityRepository,
            final MembershipEntityRepository membershipEntityRepository,
            final ServerEntityRepository serverEntityRepository,
            final DomainModelMapper domainModelMapper
    ) {
        this.userEntityRepository = userEntityRepository;
        this.membershipEntityRepository = membershipEntityRepository;
        this.serverEntityRepository = serverEntityRepository;
        this.domainModelMapper = domainModelMapper;
    }

    @Override
    @Transactional
    public User persistNew(final User user) throws PersistenceException {

        final UserEntity userEntity = new UserEntity();
        userEntity.setId(user.getId().getValue());
        userEntity.setUsername(user.getUsername());
        userEntity.setDisplayName(user.getDisplayName());
        try {
            final UserEntity savedUserEntity = this.userEntityRepository.save(userEntity);
            return this.domainModelMapper.toDomainModel(savedUserEntity);
        } catch(Exception e) {
            throw new PersistenceException(UserEntity.class, e);
        }
    }

    @Override
    @Transactional
    public User update(final User user) throws PersistenceException {

        final UserEntity userEntity = this.userEntityRepository
                .findById(user.getId().getValue())
                .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("User not found")));

        userEntity.setUsername(user.getUsername());
        userEntity.setDisplayName(user.getDisplayName());

        // Remove memberships
        userEntity
                .getMemberships()
                .removeIf(
                        membershipEntity ->
                user.getMemberships().stream().noneMatch(
                        membership -> membership.getServerId().getValue() == membershipEntity.getServer().getId()
                )
        );

        // Add memberships
        final Set<Membership> newMemberships = user.getMemberships().stream()
                .filter(membership -> userEntity.getMemberships().stream()
                        .noneMatch(membershipEntity ->  membership.getServerId().getValue() == membershipEntity.getServer().getId())
                ).collect(Collectors.toSet());
        for(var newMembership : newMemberships) {
            final MembershipEntity newMembershipEntity = this.createMembership(userEntity, newMembership);
            userEntity.getMemberships().add(newMembershipEntity);
        }

        return this.domainModelMapper.toDomainModel(this.userEntityRepository.save(userEntity));
    }

    private MembershipEntity createMembership(final UserEntity user, Membership membership) throws PersistenceException {

        final ServerEntity server = this.serverEntityRepository.findById(membership.getServerId().getValue())
                .orElseThrow(() -> new PersistenceException(User.class, new IllegalArgumentException("Server not found")));

        final Set<String> roleNames = membership.getRoles().stream().map(Role::getName).collect(Collectors.toSet());
        final MembershipEntity entity = new MembershipEntity();
        entity.setUser(user);
        entity.setServer(server);
        final Set<RoleEntity> roles = server.getRoles().stream().filter(r -> roleNames.contains(r.getName())).collect(Collectors.toSet());
        roles.add(server.getDefaultRole());
        entity.setRoles(roles);
        return this.membershipEntityRepository.save(entity);
    }

    @Override
    @Transactional
    public Optional<User> findById(final UserId userId) {

        return this.userEntityRepository
                .findById(userId.getValue())
                .map(this.domainModelMapper::toDomainModel);
    }
}
package fr.mternez.echopulse.server.data.converter;

import fr.mternez.echopulse.core.common.domain.model.Permission;
import jakarta.persistence.AttributeConverter;
import jakarta.persistence.Converter;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;
import java.util.stream.Collectors;

@Converter(autoApply = false)
public class PermissionSetConverter implements AttributeConverter<Set<Permission>, String> {

    private static final String SPLIT_CHAR = ",";

    @Override
    public String convertToDatabaseColumn(Set<Permission> attribute) {
        if (attribute == null || attribute.isEmpty()) {
            return "";
        }
        return attribute.stream()
                .map(Enum::name)
                .collect(Collectors.joining(SPLIT_CHAR));
    }

    @Override
    public Set<Permission> convertToEntityAttribute(String dbData) {
        if (dbData == null || dbData.isBlank()) {
            return EnumSet.noneOf(Permission.class);
        }
        return Arrays.stream(dbData.split(SPLIT_CHAR))
                .map(Permission::valueOf)
                .collect(Collectors.toCollection(() ->
                        EnumSet.noneOf(Permission.class)));
    }
}
package fr.mternez.echopulse.server.data.mapper;

import fr.mternez.echopulse.core.common.domain.model.*;
import fr.mternez.echopulse.server.data.model.*;
import org.springframework.stereotype.Component;

import java.util.Set;
import java.util.stream.Collectors;

@Component
public class DomainModelMapper {

    public Channel toDomainModel(final ChannelEntity entity) {
        return new Channel(new ChannelId(entity.getId()), new ServerId(entity.getServer().getId()), entity.getName());
    }

    public Role toDomainModel(final RoleEntity entity) {
        final Role role = new Role(entity.getName());
        role.setDescription(entity.getDescription());
        role.setColor(entity.getColor());
        entity.getPermissions().forEach(role::addPermission);
        return role;
    }

    public Membership toDomainModel(final MembershipEntity entity) {
        final Set<Role> roles = entity.getRoles().stream().map(this::toDomainModel).collect(Collectors.toSet());
        return new Membership(new ServerId(entity.getServer().getId()), new UserId(entity.getUser().getId()), roles);
    }

    public Server toDomainModel(final ServerEntity entity) {
        final Server model = new Server(new ServerId(entity.getId()), entity.getName(), this.toDomainModel(entity.getOwner()));
        model.setDefaultRole(this.toDomainModel(entity.getDefaultRole()));
        entity.getRoles().forEach(role -> model.addRole(this.toDomainModel(role)));
        return model;
    }

    public User toDomainModel(final UserEntity entity) {

        final UserId id = new UserId(entity.getId());
        final String username = entity.getUsername();
        final String displayName = entity.getDisplayName();
        final User user = new User(id, username, displayName);
        entity.getMemberships().stream().forEach(
                membershipEntity -> user.addMembership(this.toDomainModel(membershipEntity))
        );
        return user;
    }
}
package fr.mternez.echopulse.server.data.model;

import jakarta.persistence.*;

import java.util.UUID;

@Entity
@Table(name = "channels")
public class ChannelEntity {

    @Id
    private UUID id;

    private String name;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "server_id")
    private ServerEntity server;

    public void setId(UUID id) {
        this.id = id;
    }

    public UUID getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public ServerEntity getServer() {
        return server;
    }

    public void setServer(ServerEntity server) {
        this.server = server;
    }
}
package fr.mternez.echopulse.server.data.model;

import jakarta.persistence.*;

import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "memberships")
public class MembershipEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.UUID)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private UserEntity user;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "server_id")
    private ServerEntity server;

    @ManyToMany(fetch = FetchType.EAGER)
    private Set<RoleEntity> roles;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public UserEntity getUser() {
        return user;
    }

    public void setUser(final UserEntity userId) {
        this.user = userId;
    }

    public ServerEntity getServer() {
        return server;
    }

    public void setServer(ServerEntity server) {
        this.server = server;
    }

    public Set<RoleEntity> getRoles() {
        return roles;
    }

    public void setRoles(final Set<RoleEntity> roles) {
        this.roles = roles;
    }
}
package fr.mternez.echopulse.server.data.model;

import java.io.Serializable;

public class MembershipPK implements Serializable {

    private UserEntity user;

    public MembershipPK(final UserEntity user) {
        this.user = user;
    }

    public MembershipPK() {

    }

    public UserEntity getUser() {
        return user;
    }

    public void setUser(UserEntity user) {
        this.user = user;
    }
}
package fr.mternez.echopulse.server.data.model;

import fr.mternez.echopulse.core.common.domain.model.Permission;
import fr.mternez.echopulse.server.data.converter.PermissionSetConverter;
import jakarta.persistence.*;

import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "roles")
public class RoleEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "server_id")
    private ServerEntity server;

    private String name;

    private String description;

    private String color;

    @Convert(converter = PermissionSetConverter.class)
    private Set<Permission> permissions;

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public ServerEntity getServer() {
        return server;
    }

    public void setServer(final ServerEntity server) {
        this.server = server;
    }

    public String getName() {
        return name;
    }

    public void setName(final String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(final String description) {
        this.description = description;
    }

    public String getColor() {
        return color;
    }

    public void setColor(final String color) {
        this.color = color;
    }

    public Set<Permission> getPermissions() {
        return permissions;
    }

    public void setPermissions(final Set<Permission> permissions) {
        this.permissions = permissions;
    }
}
package fr.mternez.echopulse.server.data.model;

import jakarta.persistence.*;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "servers")
public class ServerEntity implements Serializable {

    @Id
    private UUID id;

    private String name;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "owner_id")
    private UserEntity owner;

    @OneToOne(fetch = FetchType.EAGER)
    private RoleEntity defaultRole;

    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "server")
    private Set<RoleEntity> roles = new HashSet<>();

    public void setId(UUID id) {
        this.id = id;
    }

    public UUID getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public UserEntity getOwner() {
        return owner;
    }

    public void setOwner(UserEntity owner) {
        this.owner = owner;
    }

    public RoleEntity getDefaultRole() {
        return defaultRole;
    }

    public void setDefaultRole(RoleEntity defaultRole) {
        this.defaultRole = defaultRole;
        this.defaultRole.setServer(this);
    }

    public Set<RoleEntity> getRoles() {
        return roles;
    }

    public void addRole(RoleEntity role) {
        this.roles.add(role);
        role.setServer(this);
    }

    public void removeRole(RoleEntity role) {
        this.roles.remove(role);
        role.setServer(null);
    }

    private void setRoles(Set<RoleEntity> roles) {
        this.roles = roles;
    }
}
package fr.mternez.echopulse.server.data.model;

import jakarta.persistence.*;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Entity
@Table(name = "users")
public class UserEntity implements Serializable {

    @Id
    private UUID id;

    @Column(name = "username")
    private String username;

    @Column(name = "display_name")
    private String displayName;

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "user", orphanRemoval = true)
    private Set<MembershipEntity> memberships = new HashSet<>();

    public void setId(UUID id) {
        this.id = id;
    }

    public UUID getId() {
        return id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Set<MembershipEntity> getMemberships() {
        return memberships;
    }

    public void setMemberships(final Set<MembershipEntity> memberships) {
        this.memberships = memberships;
    }
}
package fr.mternez.echopulse.server.data.projection;

import java.util.UUID;

public interface ChannelDetails {
    UUID getId();
    String getName();
}
package fr.mternez.echopulse.server.data.projection;

import java.util.Set;

public interface MembershipSummary {
    ServerSummary getServer();
    Set<RoleDetails> getRoles();
}
package fr.mternez.echopulse.server.data.projection;

import fr.mternez.echopulse.core.common.domain.model.Permission;

import java.util.Set;

public interface RoleDetails {
    String getName();
    String getDescription();
    String getColor();
    Set<Permission> getPermissions();
}
package fr.mternez.echopulse.server.data.projection;

import fr.mternez.echopulse.server.data.model.RoleEntity;

public interface ServerDefaultRole {
    RoleEntity getDefaultRole();
}
package fr.mternez.echopulse.server.data.projection;

import java.util.Set;
import java.util.UUID;

public interface ServerDetails {
    UUID getId();
    String getName();
    RoleDetails getDefaultRole();
    Set<RoleDetails> getRoles();
}
package fr.mternez.echopulse.server.data.projection;

import java.util.Set;
import java.util.UUID;

public interface ServerMemberDetails {

    ServerMemberUserSummary getUser();
    Set<RoleDetails> getRoles();

    interface ServerMemberUserSummary {
        UUID getId();
        String getUsername();
        String getDisplayName();
    }
}
package fr.mternez.echopulse.server.data.projection;

import java.util.UUID;

public interface ServerSummary {
    UUID getId();
    String getName();
}
package fr.mternez.echopulse.server.data.projection;

import java.util.Set;
import java.util.UUID;

public interface UserSummary {

    UUID getId();
    String getUsername();
    String getDisplayName();
    Set<MembershipSummary> getMemberships();
}
package fr.mternez.echopulse.server.data.repository;

import fr.mternez.echopulse.server.data.model.ChannelEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Set;
import java.util.UUID;

@Repository
public interface ChannelEntityRepository extends JpaRepository<ChannelEntity, UUID> {

    Set<ChannelEntity> findChannelEntitiesByServerId(UUID serverId);

    <T> Set<T> findAllByServerId(UUID serverId, Class<T> clazz);

    void deleteChannelEntitiesByServerId(UUID serverId);
}
package fr.mternez.echopulse.server.data.repository;

import fr.mternez.echopulse.server.data.model.MembershipEntity;
import fr.mternez.echopulse.server.data.model.MembershipPK;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Set;
import java.util.UUID;

@Repository
public interface MembershipEntityRepository extends JpaRepository<MembershipEntity, MembershipPK> {

    Set<MembershipEntity> findMembershipEntitiesByServerId(UUID serverId);

    <T> Set<T> findAllByServerId(UUID serverId, Class<T> clazz);

    <T> Set<T> findAllByServerIdAndUser_Id(UUID serverId, UUID userId, Class<T> clazz);

    <T> T findByServerIdAndUser_Id(UUID serverId, UUID userId, Class<T> clazz);

    void deleteMembershipEntityByServerIdAndUser_Id(UUID serverId, UUID userId);

    void deleteMembershipEntitiesByServerId(UUID serverId);
}
package fr.mternez.echopulse.server.data.repository;

import fr.mternez.echopulse.server.data.model.RoleEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.Set;
import java.util.UUID;

@Repository
public interface RoleEntityRepository extends JpaRepository<RoleEntity, UUID> {

    Optional<RoleEntity> findRoleEntityByServerIdAndName(UUID serverId, String name);
    Set<RoleEntity> findRoleEntitiesByServerIdAndNameIsIn(UUID serverId, Set<String> names);
}
package fr.mternez.echopulse.server.data.repository;

import fr.mternez.echopulse.server.data.model.ServerEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Collection;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;

@Repository
public interface ServerEntityRepository extends JpaRepository<ServerEntity, UUID> {

    <T> Optional<T> findById(final UUID id, Class<T> type);

    <T> Set<T> findAllByIdIn(Collection<UUID> ids, Class<T> type);
}
package fr.mternez.echopulse.server.data.repository;

import fr.mternez.echopulse.server.data.model.UserEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;
import java.util.UUID;

@Repository
public interface UserEntityRepository extends JpaRepository<UserEntity, UUID> {

    boolean existsUserEntityByUsername(final String username);
    UserEntity findUserEntityByUsername(final String username);
    <T> Optional<T> findByUsername(final String username, Class<T> clazz);
}
package fr.mternez.echopulse.server.kafka.adapter;

import fr.mternez.echopulse.core.common.event.ChannelCreated;
import fr.mternez.echopulse.core.common.event.ChannelDeleted;
import fr.mternez.echopulse.core.common.event.UserJoinedServer;
import fr.mternez.echopulse.core.common.event.UserLeftServer;
import fr.mternez.echopulse.core.server.port.out.EventPublisher;
import fr.mternez.echopulse.server.kafka.config.KafkaTopic;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

@Component
public class EventPublisherAdapter implements EventPublisher {

    private final KafkaTemplate<String, ChannelCreated> channelCreatedTemplate;
    private final KafkaTemplate<String, ChannelDeleted> channelDeletedTemplate;
    private final KafkaTemplate<String, UserJoinedServer> userJoinedServerTemplate;
    private final KafkaTemplate<String, UserLeftServer> userLeftServerTemplate;

    EventPublisherAdapter(
            final KafkaTemplate<String, ChannelCreated> channelCreatedTemplate,
            final KafkaTemplate<String, ChannelDeleted> channelDeletedTemplate,
            final KafkaTemplate<String, UserJoinedServer> userJoinedServerTemplate,
            final KafkaTemplate<String, UserLeftServer> userLeftServerTemplate
    ) {
        this.channelCreatedTemplate = channelCreatedTemplate;
        this.channelDeletedTemplate = channelDeletedTemplate;
        this.userJoinedServerTemplate = userJoinedServerTemplate;
        this.userLeftServerTemplate = userLeftServerTemplate;
    }

    @Override
    public void publish(ChannelCreated event) {
        this.channelCreatedTemplate.send(KafkaTopic.CREATE_CHANNEL.getTopic(), event);
    }

    @Override
    public void publish(ChannelDeleted event) {
        this.channelDeletedTemplate.send(KafkaTopic.DELETE_CHANNEL.getTopic(), event);
    }

    @Override
    public void publish(UserJoinedServer event) {
        this.userJoinedServerTemplate.send(KafkaTopic.USER_JOIN_SERVER.getTopic(), event);
    }

    @Override
    public void publish(UserLeftServer event) {
        this.userLeftServerTemplate.send(KafkaTopic.USER_LEAVE_SERVER.getTopic(), event);
    }
}
package fr.mternez.echopulse.server.kafka.config;

import org.apache.kafka.clients.admin.NewTopic;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.TopicBuilder;
import org.springframework.kafka.support.converter.ByteArrayJsonMessageConverter;
import org.springframework.kafka.support.converter.JsonMessageConverter;

@Configuration
@EnableKafka
public class KafkaConfiguration {

    @Bean
    public NewTopic createChannelTopic() {
        return TopicBuilder.name(KafkaTopic.CREATE_CHANNEL.getTopic())
                .build();
    }

    @Bean
    public NewTopic deleteChannelTopic() {
        return TopicBuilder.name(KafkaTopic.DELETE_CHANNEL.getTopic())
                .build();
    }

    @Bean
    public NewTopic userJoinServerTopic() {
        return TopicBuilder.name(KafkaTopic.USER_JOIN_SERVER.getTopic())
                .build();
    }

    @Bean
    public NewTopic userLeaveServerTopic() {
        return TopicBuilder.name(KafkaTopic.USER_LEAVE_SERVER.getTopic())
                .build();
    }

    @Bean
    public JsonMessageConverter jsonMessageConverter() {
        return new ByteArrayJsonMessageConverter();
    }
}
package fr.mternez.echopulse.server.kafka.config;

public enum KafkaTopic {

    CREATE_CHANNEL("channels.create"),
    DELETE_CHANNEL("channels.delete"),
    USER_JOIN_SERVER("user.join-server"),
    USER_LEAVE_SERVER("user.leave-server");

    private final String topic;

    KafkaTopic(final String topic) {
        this.topic = topic;
    }

    public String getTopic() {
        return this.topic;
    }
}
package fr.mternez.echopulse.server.resource.advice;

import fr.mternez.echopulse.core.common.domain.error.PermissionDenied;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public class GlobalErrorHandler {

    @ExceptionHandler(exception = PermissionDenied.class)
    public String handlePermissionDenied(PermissionDenied ex) throws PersistenceException {
        return ex.getReason();
    }
}
package fr.mternez.echopulse.server.resource.authentication;

import org.springframework.security.core.annotation.AuthenticationPrincipal;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Target({ElementType.PARAMETER, ElementType.ANNOTATION_TYPE})
@Retention(RetentionPolicy.RUNTIME)
@AuthenticationPrincipal(expression = "@userResolver.resolve(#this)")
public @interface AuthenticatedUser {
}
package fr.mternez.echopulse.server.resource.authentication;

import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.core.server.application.command.CreateUserCmd;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.server.port.in.UserCommandService;
import fr.mternez.echopulse.server.data.mapper.DomainModelMapper;
import fr.mternez.echopulse.server.data.model.UserEntity;
import fr.mternez.echopulse.server.data.repository.UserEntityRepository;
import jakarta.transaction.Transactional;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.stereotype.Component;

@Component
public class UserResolver {

    private final UserCommandService userCommandService;
    private final UserEntityRepository userEntityRepository;
    private final DomainModelMapper domainModelMapper;

    UserResolver(
            final UserCommandService userCommandService,
            final UserEntityRepository userEntityRepository,
            final DomainModelMapper domainModelMapper
    ){
        this.userCommandService = userCommandService;
        this.userEntityRepository = userEntityRepository;
        this.domainModelMapper = domainModelMapper;
    }

    @Transactional
    public User resolve(final Jwt token) throws PersistenceException {

        final String username = token.getClaim("preferred_username");

        final UserEntity user = this.userEntityRepository.findUserEntityByUsername(username);

        if(user == null) {
            return this.userCommandService.execute(new CreateUserCmd(null, username));
        }

        return this.domainModelMapper.toDomainModel(user);
    }
}
package fr.mternez.echopulse.server.resource.controller;

import fr.mternez.echopulse.core.common.application.InvocationSource;
import fr.mternez.echopulse.core.common.domain.error.PersistenceException;
import fr.mternez.echopulse.core.common.domain.model.ChannelId;
import fr.mternez.echopulse.core.common.domain.model.ServerId;
import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.core.server.application.command.*;
import fr.mternez.echopulse.core.server.port.in.ChannelCommandService;
import fr.mternez.echopulse.core.server.port.in.CommandAuthorizationService;
import fr.mternez.echopulse.core.server.port.in.MembershipCommandService;
import fr.mternez.echopulse.core.server.port.in.ServerCommandService;
import fr.mternez.echopulse.server.data.projection.MembershipSummary;
import fr.mternez.echopulse.server.data.repository.MembershipEntityRepository;
import fr.mternez.echopulse.server.resource.authentication.AuthenticatedUser;
import fr.mternez.echopulse.server.resource.mapper.ResourceMapper;
import fr.mternez.echopulse.server.resource.model.*;
import jakarta.transaction.Transactional;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.UUID;

@RestController
@Transactional
@RequestMapping(path = "/api/servers")
public class ServerCommandController {

    private final ServerCommandService serverCommandService;
    private final ChannelCommandService channelCommandService;
    private final MembershipCommandService membershipCommandService;
    private final CommandAuthorizationService commandAuthorizationService;
    private final MembershipEntityRepository membershipEntityRepository;
    private final ResourceMapper resourceMapper;

    ServerCommandController(
            final ServerCommandService serverCommandService,
            final ChannelCommandService channelCommandService,
            final MembershipCommandService membershipCommandService,
            final CommandAuthorizationService commandAuthorizationService,
            final MembershipEntityRepository membershipEntityRepository,
            final ResourceMapper resourceMapper
    ) {
        this.serverCommandService = serverCommandService;
        this.channelCommandService = channelCommandService;
        this.membershipCommandService = membershipCommandService;
        this.commandAuthorizationService = commandAuthorizationService;
        this.membershipEntityRepository = membershipEntityRepository;
        this.resourceMapper = resourceMapper;
    }

    @PostMapping
    public ServerDetailsResource create(@AuthenticatedUser User user, @RequestBody ServerCreationResource newServer) throws PersistenceException {

        final CreateServerCmd cmd = new CreateServerCmd(this.getInvocationSource(user), newServer.name());
        this.commandAuthorizationService.authorize(cmd);
        return this.resourceMapper.toResource(this.serverCommandService
                .execute(new CreateServerCmd(this.getInvocationSource(user), newServer.name())));
    }

    @PostMapping("{serverId}/channels")
    public ChannelDetailsResource createChannel(@AuthenticatedUser User user, @PathVariable UUID serverId, @RequestBody ChannelCreationResource newChannel) throws PersistenceException {

        final CreateChannelCmd cmd = new CreateChannelCmd(this.getInvocationSource(user), new ServerId(serverId), newChannel.name());
        this.commandAuthorizationService.authorize(cmd);
        return this.resourceMapper.toResource(this.channelCommandService.execute(cmd));
    }

    @PostMapping("{serverId}/members")
    public MembershipSummaryResource joinServer(@AuthenticatedUser User user, @PathVariable UUID serverId) throws PersistenceException {

        final CreateMembershipCmd cmd = new CreateMembershipCmd(this.getInvocationSource(user), new ServerId(serverId), user.getId());
        this.membershipCommandService.execute(cmd);
        return this.resourceMapper.toResource(this.membershipEntityRepository.findByServerIdAndUser_Id(serverId, user.getId().getValue(), MembershipSummary.class));
    }

    @DeleteMapping("{serverId}")
    public void deleteServer(@AuthenticatedUser User user, @PathVariable UUID serverId) throws PersistenceException {

        final DeleteServerCmd cmd = new DeleteServerCmd(this.getInvocationSource(user), new ServerId(serverId));
        this.commandAuthorizationService.authorize(cmd);
        this.serverCommandService.execute(cmd);
    }

    @DeleteMapping("{serverId}/channels/{channelId}")
    public void deleteChannel(@AuthenticatedUser User user, @PathVariable UUID serverId, @PathVariable UUID channelId) throws PersistenceException {

        final DeleteChannelCmd cmd = new DeleteChannelCmd(this.getInvocationSource(user), new ServerId(serverId), new ChannelId(channelId));
        this.commandAuthorizationService.authorize(cmd);
        this.channelCommandService.execute(cmd);
    }

    @DeleteMapping("{serverId}/members")
    public void leaveServer(@AuthenticatedUser User user, @PathVariable UUID serverId) throws PersistenceException {

        final DeleteMembershipCmd cmd = new DeleteMembershipCmd(this.getInvocationSource(user), new ServerId(serverId), user.getId());

        this.membershipCommandService.execute(cmd);
    }

    private InvocationSource getInvocationSource(final User user) {
        return new InvocationSource(user, Instant.now());
    }
}
package fr.mternez.echopulse.server.resource.controller;

import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.server.data.projection.ChannelDetails;
import fr.mternez.echopulse.server.data.projection.ServerDetails;
import fr.mternez.echopulse.server.data.projection.ServerMemberDetails;
import fr.mternez.echopulse.server.data.repository.ChannelEntityRepository;
import fr.mternez.echopulse.server.data.repository.MembershipEntityRepository;
import fr.mternez.echopulse.server.data.repository.ServerEntityRepository;
import fr.mternez.echopulse.server.resource.authentication.AuthenticatedUser;
import fr.mternez.echopulse.server.resource.mapper.ResourceMapper;
import fr.mternez.echopulse.server.resource.model.ChannelDetailsResource;
import fr.mternez.echopulse.server.resource.model.ServerDetailsResource;
import fr.mternez.echopulse.server.resource.model.ServerMemberDetailsResource;
import jakarta.transaction.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@Transactional
@RequestMapping(path = "/api/servers")
public class ServerQueryController {

    private final ServerEntityRepository serverEntityRepository;
    private final MembershipEntityRepository membershipEntityRepository;
    private final ChannelEntityRepository channelEntityRepository;
    private final ResourceMapper resourceMapper;

    ServerQueryController(
            final ServerEntityRepository serverEntityRepository,
            final MembershipEntityRepository membershipEntityRepository,
            final ChannelEntityRepository channelEntityRepository,
            final ResourceMapper resourceMapper
    ) {
        this.serverEntityRepository = serverEntityRepository;
        this.membershipEntityRepository = membershipEntityRepository;
        this.channelEntityRepository = channelEntityRepository;
        this.resourceMapper = resourceMapper;
    }


    @GetMapping("{serverId}")
    public ResponseEntity<ServerDetailsResource> getServerDetails(@AuthenticatedUser User user, @PathVariable UUID serverId) {

        return this.serverEntityRepository
                .findById(serverId, ServerDetails.class)
                .map(this.resourceMapper::toResource)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("{serverId}/channels")
    public Set<ChannelDetailsResource> getChannels(@AuthenticatedUser User user, @PathVariable UUID serverId) {

        return this.channelEntityRepository.findAllByServerId(serverId, ChannelDetails.class)
                .stream()
                .map(this.resourceMapper::toResource)
                .collect(Collectors.toSet());
    }

    @GetMapping("{serverId}/members")
    public Set<ServerMemberDetailsResource> getMembers(@AuthenticatedUser User user, @PathVariable UUID serverId) {

        return this.membershipEntityRepository.findAllByServerId(serverId, ServerMemberDetails.class)
                .stream()
                .map(this.resourceMapper::toResource)
                .collect(Collectors.toSet());
    }
}
package fr.mternez.echopulse.server.resource.controller;


import fr.mternez.echopulse.core.common.domain.model.User;
import fr.mternez.echopulse.server.data.projection.UserSummary;
import fr.mternez.echopulse.server.data.repository.UserEntityRepository;
import fr.mternez.echopulse.server.resource.authentication.AuthenticatedUser;
import fr.mternez.echopulse.server.resource.mapper.ResourceMapper;
import fr.mternez.echopulse.server.resource.model.UserSummaryResource;
import jakarta.transaction.Transactional;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Transactional
@RequestMapping(path = "/api/users")
public class UserController {

    private final UserEntityRepository userEntityRepository;
    private final ResourceMapper resourceMapper;

    UserController(
            final UserEntityRepository userEntityRepository,
            final ResourceMapper resourceMapper
    ) {
        this.userEntityRepository = userEntityRepository;
        this.resourceMapper = resourceMapper;
    }

    @GetMapping
    public ResponseEntity<UserSummaryResource> getSelf(@AuthenticatedUser User self) {

        return this.userEntityRepository.findByUsername(self.getUsername(), UserSummary.class)
                .map(this.resourceMapper::toResource)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
}

package fr.mternez.echopulse.server.resource.mapper;

import fr.mternez.echopulse.core.common.domain.model.*;
import fr.mternez.echopulse.server.data.projection.*;
import fr.mternez.echopulse.server.resource.model.*;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Named;

import java.util.UUID;

@Mapper(componentModel = "spring")
public interface ResourceMapper {

    RoleDetailsResource toResource(RoleDetails details);
    ServerDetailsResource toResource(ServerDetails details);
    ChannelDetailsResource toResource(ChannelDetails details);
    ServerMemberDetailsResource toResource(ServerMemberDetails details);
    @Mapping(source = "model.id", target = "id", qualifiedByName = "serverIdToUUID")
    ServerDetailsResource toResource(Server model);
    @Mapping(source = "model.id", target = "id", qualifiedByName = "channelIdToUUID")
    ChannelDetailsResource toResource(Channel model);
    MembershipSummaryResource toResource(MembershipSummary summary);
    ServerSummaryResource toResource(ServerSummary summary);
    UserSummaryResource toResource(UserSummary summary);

    @Named("serverIdToUUID")
    default UUID serverIdToUUID(final ServerId serverId) {
        return serverId.getValue();
    }

    @Named("channelIdToUUID")
    default UUID channelIdToUUID(final ChannelId channelId) {
        return channelId.getValue();
    }
}
package fr.mternez.echopulse.server.resource.model;

public record ChannelCreationResource(String name) {}
package fr.mternez.echopulse.server.resource.model;

import java.util.UUID;

public record ChannelDetailsResource(UUID id, String name) {}
package fr.mternez.echopulse.server.resource.model;

public record MembershipSummaryResource(ServerSummaryResource server) { }
package fr.mternez.echopulse.server.resource.model;

import fr.mternez.echopulse.core.common.domain.model.Permission;

import java.util.Set;

public record RoleDetailsResource(
        String name,
        String description,
        String color,
        Set<Permission> permissions
) {}
package fr.mternez.echopulse.server.resource.model;

public record ServerCreationResource(String name) {}
package fr.mternez.echopulse.server.resource.model;

import java.util.Set;
import java.util.UUID;

public record ServerDetailsResource(
        UUID id,
        String name,
        RoleDetailsResource defaultRole,
        Set<RoleDetailsResource> roles
){}
package fr.mternez.echopulse.server.resource.model;

import java.util.Set;
import java.util.UUID;

public record ServerMemberDetailsResource(
        ServerMemberUserDetailsResource user,
        Set<RoleDetailsResource> roles
) {
    public record ServerMemberUserDetailsResource(UUID id, String username, String displayName) {}
}
package fr.mternez.echopulse.server.resource.model;

import java.util.UUID;

public record ServerSummaryResource(UUID id, String name) { }
package fr.mternez.echopulse.server.resource.model;

import fr.mternez.echopulse.server.data.projection.MembershipSummary;

import java.util.Set;
import java.util.UUID;

public record UserSummaryResource(UUID id, String username, String displayName, Set<MembershipSummary> memberships) {}
package fr.mternez.echopulse.server;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ServerServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(ServerServiceApplication.class, args);
	}

}
